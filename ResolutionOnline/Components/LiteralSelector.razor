@using System.Text.RegularExpressions;
@using static Resolution.ClausalForm;

<div class="overlay">
    <div class="selector">
        <div style="padding: 10px">
            <div>
                <di style="text-align: left">
                    Select all literals to resolve on
                </di>
                <di style="text-align: right">
                    <button class="symbolButton" @onclick=CancelResolution>✖</button>
                </di>
            </div>
            <vertic>
                @foreach (var literal in LeftLiterals)
                {
                    <clause @onclick="e => AlterLiteralSelection(LeftSelectedLiterals, literal)"
                            style="@($"outline: {(LeftSelectedLiterals.Contains(literal) ? "2px dashed cornflowerblue" : "1px solid gray")}")">
                        @((MarkupString)literal.Print())
                    </clause>
                }
            </vertic>
            <vertic>
                @foreach (var literal in RightLiterals)
                {
                    <clause @onclick="e => AlterLiteralSelection(RightSelectedLiterals, literal)"
                         style="@($"outline: {(RightSelectedLiterals.Contains(literal) ? "2px dashed orange" : "1px solid gray")}")">
                        @((MarkupString)literal.Print())
                    </clause>
                }
            </vertic>
            <vertic>
                @if (LeftSelectedLiterals.Count != 0 && RightSelectedLiterals.Count != 0)
                {
                    <button @onclick=@(e => Resolve.InvokeAsync(this))>Resolve</button>
                }
            </vertic>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Literal> LeftLiterals { get; set; }

    [Parameter]
    public List<Literal> RightLiterals { get; set; }

    [Parameter]
    public EventCallback CancelResolution { get; set; }

    [Parameter]
    public EventCallback<LiteralSelector> Resolve { get; set; }

    public HashSet<Literal> LeftSelectedLiterals = new HashSet<Literal> { };

    public HashSet<Literal> RightSelectedLiterals = new HashSet<Literal> { };

    /// <summary>
    /// Adds a literal to the specified set of selected literals. If the literal already exists there, it gets removed.
    /// </summary>
    public void AlterLiteralSelection(HashSet<Literal> selectedLiterals, Literal alteringLiteral)
    {
        if (selectedLiterals.Contains(alteringLiteral))
        {
            selectedLiterals.Remove(alteringLiteral);
        }
        else
        {
            selectedLiterals.Add(alteringLiteral);
        }
    }

    /// <summary>
    /// Skip the selection step in case there's only one literal per clause
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (LeftLiterals.Count == 1 && RightLiterals.Count == 1)
        {
            LeftSelectedLiterals = LeftLiterals.ToHashSet();
            RightSelectedLiterals = RightLiterals.ToHashSet();
            Resolve.InvokeAsync(this);
        }
    }
}
