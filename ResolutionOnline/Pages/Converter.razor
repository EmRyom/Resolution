@page "/converter"
@using ResolutionOnline.Data
@using Resolution
@inject NavigationManager NavigationManager
@using BlazorAnimate
@inject ResolutionFlowContainer ResolutionFlowContainer

<h3>Converter</h3>

@if (_resolutionFlow != null)
{
    <div style="margin: auto; width: 100%; text-align:center;">
        Negation of the formula:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
            <vertic2>@((MarkupString)_step1.Print())</vertic2>
        </Animate>
        
        Reduction of implication:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(1.5)">
            <vertic2>@((MarkupString)_step2.Print())</vertic2>
        </Animate>

        Movement of negation inwards:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(2.5)">
            <vertic2>@((MarkupString)_step3.Print())</vertic2>
        </Animate>
        
        Rename of all existential variables to unique names:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(3.5)">
            <vertic2>@((MarkupString)_step4.Print())</vertic2>
        </Animate>
        
        Skolemization:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(4.5)">
            <vertic2>@((MarkupString)_step5.Print())</vertic2>
        </Animate>
        
        Dropping universal quantification:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(5.5)">
            <vertic2>@((MarkupString)_step6.Print())</vertic2>
        </Animate>

        Distribution of the conjunctions and disjunctions:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(6.5)">
            <vertic2>@((MarkupString)_step7.Print())</vertic2>
        </Animate>

        In clausal form:
        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(7.5)">
            <vertic2>@((MarkupString)_step8.Print())</vertic2>
        </Animate>

        <button type="button" @onclick="MoveToResolver">
            Start resolving
        </button>
    </div>

}
else
{
    <vertic>
        Please enter a formula at the start screen
    </vertic>
}

@code {
    ResolutionFlow? _resolutionFlow;
    ClauseConverter _clauseConverter;
    ProofTools _proofTools;

    GeneralForm.IFormula _step1;
    GeneralForm.IFormula _step2;
    GeneralForm.IFormula _step3;
    GeneralForm.IFormula _step4;
    GeneralForm.IFormula _step5;
    GeneralForm.IFormula _step6;
    GeneralForm.IFormula _step7;
    ClausalForm.ClausalFormula _step8;
    ClausalForm.ClausalFormula _step9;

    protected override void OnInitialized()
    {
        ResolutionFlowContainer.OnStateChange += StateHasChanged;
        _resolutionFlow = ResolutionFlowContainer.Value;
        _clauseConverter = new ClauseConverter(false);
        _proofTools = new ProofTools(false);

        if (_resolutionFlow?.toConvert == null)
        {
            return;
        }

        _step1 = new GeneralForm.Negation(_resolutionFlow.toConvert.Clone());
        _step2 = _clauseConverter.RemoveImp(_clauseConverter.RemoveBiimp(_step1.Clone()));
        _step3 = _clauseConverter.MoveNegInwards(_step2.Clone());
        _step4 = _clauseConverter.UniquefyVariables(_step3.Clone());
        _step5 = _clauseConverter.Skolemize(_step4.Clone());
        _step6 = _clauseConverter.DropUniversals(_step5.Clone());
        _step7 = _clauseConverter.Distribute(_step6.Clone());
        _step8 = _clauseConverter.StraightConversion(_step7.Clone());
        _step9 = new ClausalForm.ClausalFormula(_step8.Clauses.ToList());
    }

    private void MoveToResolver()
    {
        _resolutionFlow.Convert(_clauseConverter,_proofTools);
        ResolutionFlowContainer.Value = _resolutionFlow;
        NavigationManager.NavigateTo("/resolver");
    }
}
