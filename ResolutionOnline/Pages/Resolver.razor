@page "/resolver"
@using ResolutionOnline.Data
@using Resolution
@inject NavigationManager NavigationManager
@inject ResolutionFlowContainer ResolutionFlowContainer
@using BlazorAnimate
@inject Clipboard.IClipboardService ClipboardService
@using ResolutionOnline.Components;

<h3>Resolver</h3>

@if (_resolutionFlow != null)
{
    <div style="margin: auto; width:100%; text-align:center;">
        @if (_literalSelectorActive)
        {
            <LiteralSelector LeftLiterals=@_resolutionFlow.proof.GetClause(_resolveSource).Literals RightLiterals=@_resolutionFlow.proof.GetClause(_resolveTarget).Literals  CancelResolution="ResetResolve" Resolve="ResolveEnd"/>
        }
        @if (_renameClause != 0)
        {
            <RenameVariablePrompt variablesInClause=@(_proofTools.ClauseVariables(_resolutionFlow.proof.GetClause((int)_renameClause))) CancelRenaming="RenameStop" Rename="e => RenameEnd(e.Source, e.Target)" />
        }
        <table style="margin: auto; text-align:left;">
            <tbody>
            @for (int index = 0; index < _resolutionFlow.proof.Applications.Count; index++)
            {
                var i = 1 + index;
                <tr>
                    @* Display clause number *@
                    <td style="color: black">
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <math>
                                @((MarkupString)$"<i>C<sub>{i}</sub> =")
                            </math>
                        </Animate>
                    </td>
                    @* Display clause *@
                    <td>
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <clause draggable="true"
                                    ondragover="event.preventDefault();"
                                    style="@($"outline: {(_resolveTarget == i && _resolveTarget != _resolveSource ? "2px dashed orange" : _proofTools.IsEmptyClause(_resolutionFlow.proof.GetClause(i)) ? "1px solid white; background-color: green; color: white" : "1px solid gray")}")"
                                    @ondragenter="e => SetResolveTarget(i)"
                                    @ondragstart="e => SetResolveSource(i)"
                                    @ondrop="e => StartResolution()">
                                <div style="text-align: center;">
                                    @((MarkupString)_resolutionFlow.proof.GetClause(i).Print())
                                </div>
                            </clause>
                        </Animate>
                    </td>
                    @* Display clause obtaining operation *@
                    <td style="text-align: left; color: black">
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            @((MarkupString)("<i>, " + _resolutionFlow.proof.Applications[i - 1].PrintMethod()))
                        </Animate>
                    </td>
                    @* Add 'rename' button to every clause with a variable *@
                    @if (_proofTools.ClauseVariables(_resolutionFlow.proof.GetClause(i)).Count > 0)
                    {
                        <td style="width=38px">
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <button class="proofButton" @onclick="(e => RenameStart(i))">📝</button>
                            </Animate>
                        </td>
                    }
                    else
                    {
                        <td style="width=38px">
                        </td>
                    }
                    @* Add 'delete' button to every applicaiton that permits it *@
                    @if (!_resolutionFlow.proof.MustKeepApplication(i))
                    {
                        <td style="width=38px">
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <button class="proofButton" @onclick="(e => Delete(i))">✖</button>
                            </Animate>
                        </td>
                    }
                    else
                    {
                        <td style="width=38px">
                        </td>
                    }
                    @* Display substitutions relevant to clause *@
                    <td style="text-align: left; color: black">
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            @((MarkupString)(_resolutionFlow.proof.Applications[i - 1].PrintSubstitutions()))
                        </Animate>
                    </td>
                </tr>
            }
            </tbody>
        </table>

        @* If the proof contians the empty clause, it is considered finished and the proof can be copied to the clipboard. *@
        @if (_resolutionFlow.proof.Applications.Any(x => _proofTools.IsEmptyClause(x.GetClause())))
        {
            <button @onclick="e => CopyProof()">Copy verifiable proof to clipboard</button>
        }

        @* Error messages *@
        <div style="height: 30px; padding-bottom : 50px;">
            @for (int ei = 0; ei < _errors.Count; ei++)
            {
                var m = ((MarkupString)_errors[ei].message);
                <vertic>
                    <Animate Animation="Animations.Fade" Duration="TimeSpan.FromSeconds(0.5)">
                        <message>
                            @m
                        </message>
                    </Animate>
                    @{
                        if (_toDeleteErrors <= ei)
                        {
                            DeleteError();
                        }
                    }
                </vertic>
            }
        </div>
    </div>
}
else
{
    <vertic>
        Please enter a formula at the start screen
    </vertic>
}




@code {
    ResolutionFlow? _resolutionFlow;
    readonly ProofTools _proofTools = new(true);

    protected override void OnInitialized()
    {
        // Update the state 
        ResolutionFlowContainer.OnStateChange += StateHasChanged;
        _resolutionFlow = ResolutionFlowContainer.Value;
    }

    /// <summary>
    /// 1st clause that is being resolved on.
    /// </summary>
    int _resolveSource;
    /// <summary>
    /// 2nd clause that is being resolved on.
    /// </summary>
    int _resolveTarget; 

    /// <summary>
    /// List of errors currently displayed
    /// </summary>
    List<ProofTools.ResolveError> _errors = new();
    /// <summary>
    /// Indicates how many error messages are currently displayed
    /// </summary>
    int _toDeleteErrors; 


    // Front end triggers
    /// <summary>
    /// Indicates whether the choice prompt window should be shown.
    /// </summary>
    bool _literalSelectorActive; 
    /// <summary>
    /// The clause that needs to have a variable renamed. 0 if not active.
    /// </summary>
    int _renameClause;

    /// <summary>
    /// To initiate resolution, start the literal selector.
    /// </summary>
    private void StartResolution()
    {
        if (_resolveSource == _resolveTarget)
        {
            _resolveSource = 0;
            _resolveTarget = 0;
            return;
        }
        _literalSelectorActive = true;
        StateHasChanged();
    }

    /// <summary>
    /// Resolving function
    /// </summary>
    private void ResolveEnd(LiteralSelector selector)
    {
        Console.WriteLine($"ResolveEnd with {_resolveTarget} {_resolveSource}");
        var leftClause = _resolutionFlow?.proof.GetClause(_resolveSource);
        var rightClause = _resolutionFlow?.proof.GetClause(_resolveTarget);

        var result = _proofTools.Resolve(
            _resolveSource,
            _resolveTarget,
            leftClause,
            rightClause,
            selector.LeftSelectedLiterals,
            selector.RightSelectedLiterals
        );

        if (result.IsSuccesful)
        {
            _resolutionFlow?.proof.Applications.Add(result.Resolve);
        }
        else
        {
            _errors.Add(result.Error);
            Console.WriteLine($"Error list length: {_errors.Count} Index of new error {_errors.IndexOf(result.Error)} ");
        }

        ResetResolve();
    }

    /// <summary>
    /// Automatically deletes an error as it is being shown
    /// </summary>
    private async void DeleteError()
    {
        _toDeleteErrors++;
        StateHasChanged();
        await Task.Delay(3000);
        _toDeleteErrors--;
        _errors.RemoveAt(0);
        StateHasChanged();
    }

    /// <summary>
    /// When clicking an dragging a clause, set that clause as the source
    /// </summary>
    /// <param name="index"></param>
    private void SetResolveSource(int index) 
    { 
        _resolveSource = index; 
        StateHasChanged(); 
    }

    /// <summary>
    /// When dragging into a clause, set that clause as the target
    /// </summary>
    /// <param name="index"></param>
    private void SetResolveTarget(int index)
    {
        if (_resolveSource == 0) return;
        _resolveTarget = index; 
        StateHasChanged();
    } 


    /// <summary>
    /// Resets the resolutions relevant stuff to zero.
    /// </summary>
    private void ResetResolve() 
    { 
        _resolveSource = 0; 
        _resolveTarget = 0; 
        _literalSelectorActive = false;
        StateHasChanged(); 
    }

    /// <summary>
    /// Delete a step from the proof.
    /// </summary>
    /// <param name="index"></param>
    private void Delete(int index) { _resolutionFlow.proof.DeleteApplication(index); StateHasChanged(); }

    /// <summary>
    /// Invoked to finish a renaming step. Calculates the new clause where the varaible is renamed to the target name. 
    /// Adds the renaming step to the proof.
    /// </summary>
    /// <param name="source"></param>
    /// <param name="target"></param>
    private void RenameEnd(string source, string target)
    {
        var clauseUsedForRenaming = _resolutionFlow.proof.GetClause(_renameClause);
        var rename = _proofTools.RenameVariable(source, target, _renameClause, clauseUsedForRenaming);
        _resolutionFlow.proof.Applications.Add(rename);

        RenameStop();
    }

    /// <summary>
    /// Starts the process of renaming a variable. Opens the prompt.
    /// </summary>
    /// <param name="i"></param>
    private void RenameStart(int i)
    {
        _renameClause = i;
        StateHasChanged();
    }

    /// <summary>
    /// Cancel the renaming process of a variable. Close the prompt.
    /// </summary>
    private void RenameStop()
    {
        _renameClause = 0;
        StateHasChanged();
    }

    /// <summary>
    /// DISABLED Summons the Isabelle proof generator to generate the formally verifiable proof, then copies to the clipboard.
    /// </summary>
    private void CopyProof()
    {
        var c = new Isabelle.AST.ProofConnector(Isabelle.Compiler.compileProof(_resolutionFlow.proof));
        ClipboardService.CopyToClipboard(Isabelle.Generator.generateSingle(c.x.Item1, c.x.Item2));
    }

}

