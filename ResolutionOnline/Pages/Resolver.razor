@page "/resolver"
@using Resolution.Utilities;
@using ResolutionOnline.Data
@using Resolution
@inject NavigationManager NavigationManager
@inject ResolutionFlowContainer ResolutionFlowContainer
@using BlazorAnimate
@inject Clipboard.IClipboardService ClipboardService
@using ResolutionOnline.Components;

<h3>Resolver</h3>

@if (_resolutionFlow != null)
{
    <div style="margin: auto; width:100%; text-align:center;">
        @if (_literalSelectorActive)
        {
            <LiteralSelector LeftLiterals=@_resolutionFlow.proof.GetClause(_resolveSource).Literals RightLiterals=@_resolutionFlow.proof.GetClause(_resolveTarget).Literals  CancelResolution="ResetResolve" Resolve="ResolveEnd"/>
        }
        @if (_renameClause != 0)
        {
            <RenameVariablePrompt variablesInClause=@(ProofTools.ClauseVariables(_resolutionFlow.proof.GetClause((int)_renameClause))) CancelRenaming="RenameStop" Rename="e => RenameEnd(e.Source, e.Target)" />
        }
        @if (_proofImporterActive)
        {
            <ProofImporter Import="ImportProof" CancelImport="StopProofImport"/>
        }
        <table style="margin: auto; text-align:left;">
            <tbody>
            @for (int pointer = 1; pointer < _resolutionFlow.proof.Applications.Count + 1; pointer++)
            {
                // Index separate from pointer necessary as pointer is unreliable
                var index = pointer;
                <tr>
                    @* Display clause number *@
                    <td style="color: black">
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <math>
                                @((MarkupString)$"<i>C<sub>{index}</sub> =")
                            </math>
                        </Animate>
                    </td>
                    @* Display clause *@
                    <td>
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            <clause draggable="true"
                                    ondragover="event.preventDefault();"
                                    style="@("outline: " + DeterminteClauseStyling(index))"
                                    @ondragenter="e => SetResolveTarget(index)"
                                    @ondragstart="e => SetResolveSource(index)"
                                    @ondrop="e => StartResolution()">
                                <div style="text-align: center;">
                                    @((MarkupString)_resolutionFlow.proof.GetClause(index).Print())
                                </div>
                            </clause>
                        </Animate>
                    </td>
                    @* Display clause obtaining operation *@
                    <td style="text-align: left; color: black">
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            @((MarkupString)("<i>, " + _resolutionFlow.proof.Applications[index - 1].PrintMethod()))
                        </Animate>
                    </td>
                    @* Add 'rename' button to every clause with a variable *@
                    @if (ProofTools.ClauseVariables(_resolutionFlow.proof.GetClause(index)).Count > 0)
                    {
                        <td style="width=38px">
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <button class="symbolButton" @onclick="(e => RenameStart(index))">📝</button>
                            </Animate>
                        </td>
                    }
                    else
                    {
                        <td style="width=38px">
                        </td>
                    }
                    @* Add 'delete' button to every applicaiton that permits it *@
                    @if (!_resolutionFlow.proof.MustKeepApplication(index))
                    {
                        <td style="width=38px">
                            <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                                <button class="symbolButton" @onclick="(e => Delete(index))">✖</button>
                            </Animate>
                        </td>
                    }
                    else
                    {
                        <td style="width=38px">
                        </td>
                    }
                    @* Display substitutions relevant to clause *@
                    <td style="text-align: left; color: black">
                        <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(0.5)">
                            @((MarkupString)(_resolutionFlow.proof.Applications[index - 1].PrintSubstitutions()))
                        </Animate>
                    </td>
                </tr>
            }
            </tbody>
        </table>

        @* If the proof contians the empty clause, it is considered finished and the proof can be copied to the clipboard. *@
        @if (_resolutionFlow.proof.Applications.Any(x => ProofTools.IsEmptyClause(x.GetClause())))
        {
            <button @onclick="e => CopyProof()">Copy verifiable proof to clipboard</button>
        }

        @* Import or export the proof *@
        <vertic>
            <button @onclick="(e => StartProofImport())">Import proof</button>
            <button @onclick="(e => ExportProof())">Export proof</button>
        </vertic>

        @* Display error messages *@
        <Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

        
    </div>
}
else
{
    <vertic>
        Please enter a formula at the start screen
    </vertic>
}




@code {
    ResolutionFlow? _resolutionFlow;

    protected override void OnInitialized()
    {
        // Update the state 
        ResolutionFlowContainer.OnStateChange += StateHasChanged;
        _resolutionFlow = ResolutionFlowContainer.Value;
    }

    /// <summary>
    /// To make the clauses look different depending on the state of the proof.
    /// </summary>
    /// <param name="index"></param>
    /// <returns></returns>
    private string DeterminteClauseStyling(int index)
    {
        var emptyClauseStyling = "1px solid white; background-color: green; color: white";
        var defaultClauseStyling = "1px solid gray";
        var leftClauseStyling = "2px dashed cornflowerblue";
        var rightClauseStyling = "2px dashed orange";

        // If the clause is empty, make it green to indicate that the proof is finished
        if (ProofTools.IsEmptyClause(_resolutionFlow.proof.GetClause(index)))
            return emptyClauseStyling;
        
        // If the clase is dragged, outline it in blue 
        if (_resolveSource == index)
            return leftClauseStyling;
        
        // If the clause is hovered over, outline it in orange
        if (_resolveTarget == index)
            return rightClauseStyling;
        
        // Default clause
        return defaultClauseStyling;
    }

    // Front end triggers
    /// <summary>
    /// Indicates whether the choice prompt window should be shown.
    /// </summary>
    bool _literalSelectorActive; 
    /// <summary>
    /// The clause that needs to have a variable renamed. 0 if not active.
    /// </summary>
    int _renameClause;
    /// <summary>
    /// Indicates whether the proof importer prompt is active.
    /// </summary>
    bool _proofImporterActive;

    #region Resolver Control
    /// <summary>
    /// 1st clause that is being resolved on.
    /// </summary>
    int _resolveSource;
    /// <summary>
    /// 2nd clause that is being resolved on.
    /// </summary>
    int _resolveTarget;

    /// <summary>
    /// When clicking an dragging a clause, set that clause as the source
    /// </summary>
    /// <param name="index"></param>
    private void SetResolveSource(int index)
    {
        _resolveSource = index;
        StateHasChanged();
    }

    /// <summary>
    /// When dragging into a clause, set that clause as the target
    /// </summary>
    /// <param name="index"></param>
    private void SetResolveTarget(int index)
    {
        if (_resolveSource == 0) return;
        _resolveTarget = index;
        StateHasChanged();
    }

    /// <summary>
    /// Resets the resolutions relevant stuff to zero.
    /// </summary>
    private void ResetResolve()
    {
        _resolveSource = 0;
        _resolveTarget = 0;
        _literalSelectorActive = false;
        StateHasChanged();
    }
    #endregion

    #region Resolution
    /// <summary>
    /// To initiate resolution, start the literal selector.
    /// </summary>
    private void StartResolution()
    {
        if (_resolveSource == _resolveTarget)
        {
            _resolveSource = 0;
            _resolveTarget = 0;
            return;
        }
        _literalSelectorActive = true;
        StateHasChanged();
    }

    /// <summary>
    /// Resolving function
    /// </summary>
    private void ResolveEnd(LiteralSelector selector)
    {
        Console.WriteLine($"ResolveEnd with {_resolveTarget} {_resolveSource}");
        var leftClause = _resolutionFlow?.proof.GetClause(_resolveSource);
        var rightClause = _resolutionFlow?.proof.GetClause(_resolveTarget);

        var result = ProofTools.Resolve(
            _resolveSource,
            _resolveTarget,
            leftClause,
            rightClause,
            selector.LeftSelectedLiterals,
            selector.RightSelectedLiterals
        );

        if (result.IsSuccesful)
        {
            _resolutionFlow?.proof.Applications.Add(result.Resolve);
        }
        else
        {
            messages.Add(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = "Error",
                    HelpText = $"{DateTime.Now}",
                    Message = result.Error.message,
                });
        }

        ResetResolve();
    }
    #endregion

    /// <summary>
    /// Delete a step from the proof.
    /// </summary>
    /// <param name="index"></param>
    private void Delete(int index) { _resolutionFlow.proof.DeleteApplication(index); StateHasChanged(); }

    #region Renaming
    /// <summary>
    /// Invoked to finish a renaming step. Calculates the new clause where the varaible is renamed to the target name. 
    /// Adds the renaming step to the proof.
    /// </summary>
    /// <param name="source"></param>
    /// <param name="target"></param>
    private void RenameEnd(string source, string target)
    {
        var clauseUsedForRenaming = _resolutionFlow.proof.GetClause(_renameClause);
        var rename = ProofTools.RenameVariable(source, target, _renameClause, clauseUsedForRenaming);
        _resolutionFlow.proof.Applications.Add(rename);

        RenameStop();
    }

    /// <summary>
    /// Starts the process of renaming a variable. Opens the prompt.
    /// </summary>
    /// <param name="i"></param>
    private void RenameStart(int i)
    {
        _renameClause = i;
        StateHasChanged();
    }

    /// <summary>
    /// Cancel the renaming process of a variable. Close the prompt.
    /// </summary>
    private void RenameStop()
    {
        _renameClause = 0;
        StateHasChanged();
    }
    #endregion

    /// <summary>
    /// DISABLED Summons the Isabelle proof generator to generate the formally verifiable proof, then copies to the clipboard.
    /// </summary>
    private void CopyProof()
    {
        var c = new Isabelle.AST.Connector(Isabelle.Compiler.compileProof(_resolutionFlow.proof));
        //ClipboardService.CopyToClipboard(Isabelle.Generator.generateSingle(c.x.Item1, c.x.Item2));
    }

    #region Proof Import/Export
    private void StartProofImport()
    {
        _proofImporterActive = true;
        StateHasChanged();
    }

    private void StopProofImport()
    {
        _proofImporterActive = false;
        StateHasChanged();
    }

    /// <summary>
    /// Returns a JSON serialization of the proof
    /// </summary>
    /// <returns></returns>
    private void ExportProof()
    {
        var proof = Serializer.Export(_resolutionFlow.toParse, _resolutionFlow.proof);
        ClipboardService.CopyToClipboard(proof.ToString());

        messages.Add(new ToastMessage
            {
                Type = ToastType.Success,
                Message = $"Copied proof to clipboard.",
            });
    }

    /// <summary>
    /// Imports a JSON serialization of a proof
    /// </summary>
    /// <param name="input"></param>
    private void ImportProof(string input)
    {
        var proof = Serializer.ImportProof(input);
        _resolutionFlow.proof = proof;
        StopProofImport();
    }
    #endregion

    List<ToastMessage> messages = new List<ToastMessage>();

}

